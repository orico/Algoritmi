/* TESINA DI TEORIE E TECNICHE DI COMPILAZIONE
 * Ranking - Parser
 *
 * XHTML 1.0 Transitional
 *
 * Giugno 2008 - Dario Banno
 */
%{
#include "common.h"
%}


/* -- block generated by tokenizer.sh */
%token ANCHOR_OPEN
%token ANCHOR_CLOSE
%token ABBR_OPEN
%token ABBR_CLOSE
%token ACRONYM_OPEN
%token ACRONYM_CLOSE
%token ADDRESS_OPEN
%token ADDRESS_CLOSE
%token APPLET_OPEN
%token APPLET_CLOSE
%token AREA_OPEN
%token AREA_CLOSE
%token B_OPEN
%token B_CLOSE
%token BASE_OPEN
%token BASE_CLOSE
%token BASEFONT_OPEN
%token BASEFONT_CLOSE
%token BDO_OPEN
%token BDO_CLOSE
%token BIG_OPEN
%token BIG_CLOSE
%token BLOCKQUOTE_OPEN
%token BLOCKQUOTE_CLOSE
%token BODY_OPEN
%token BODY_CLOSE
%token BR_OPEN
%token BR_CLOSE
%token BUTTON_OPEN
%token BUTTON_CLOSE
%token CAPTION_OPEN
%token CAPTION_CLOSE
%token CENTER_OPEN
%token CENTER_CLOSE
%token CITE_OPEN
%token CITE_CLOSE
%token CODE_OPEN
%token CODE_CLOSE
%token COL_OPEN
%token COL_CLOSE
%token COLGROUP_OPEN
%token COLGROUP_CLOSE
%token DD_OPEN
%token DD_CLOSE
%token DEL_OPEN
%token DEL_CLOSE
%token DFN_OPEN
%token DFN_CLOSE
%token DIR_OPEN
%token DIR_CLOSE
%token DIV_OPEN
%token DIV_CLOSE
%token DL_OPEN
%token DL_CLOSE
%token DT_OPEN
%token DT_CLOSE
%token EM_OPEN
%token EM_CLOSE
%token FIELDSET_OPEN
%token FIELDSET_CLOSE
%token FONT_OPEN
%token FONT_CLOSE
%token FORM_OPEN
%token FORM_CLOSE
%token FRAME_OPEN
%token FRAME_CLOSE
%token FRAMESET_OPEN
%token FRAMESET_CLOSE
%token H1_OPEN
%token H1_CLOSE
%token H2_OPEN
%token H2_CLOSE
%token H3_OPEN
%token H3_CLOSE
%token H4_OPEN
%token H4_CLOSE
%token H5_OPEN
%token H5_CLOSE
%token H6_OPEN
%token H6_CLOSE
%token HEAD_OPEN
%token HEAD_CLOSE
%token HR_OPEN
%token HR_CLOSE
%token HTML_OPEN
%token HTML_CLOSE
%token I_OPEN
%token I_CLOSE
%token IFRAME_OPEN
%token IFRAME_CLOSE
%token IMG_OPEN
%token IMG_CLOSE
%token INPUT_OPEN
%token INPUT_CLOSE
%token INS_OPEN
%token INS_CLOSE
%token ISINDEX_OPEN
%token ISINDEX_CLOSE
%token KBD_OPEN
%token KBD_CLOSE
%token LABEL_OPEN
%token LABEL_CLOSE
%token LEGEND_OPEN
%token LEGEND_CLOSE
%token LI_OPEN
%token LI_CLOSE
%token LINK_OPEN
%token LINK_CLOSE
%token MAP_OPEN
%token MAP_CLOSE
%token MENU_OPEN
%token MENU_CLOSE
%token META_OPEN
%token META_CLOSE
%token NOFRAMES_OPEN
%token NOFRAMES_CLOSE
%token NOSCRIPT_OPEN
%token NOSCRIPT_CLOSE
%token OBJECT_OPEN
%token OBJECT_CLOSE
%token OL_OPEN
%token OL_CLOSE
%token OPTGROUP_OPEN
%token OPTGROUP_CLOSE
%token OPTION_OPEN
%token OPTION_CLOSE
%token P_OPEN
%token P_CLOSE
%token PARAM_OPEN
%token PARAM_CLOSE
%token PRE_OPEN
%token PRE_CLOSE
%token Q_OPEN
%token Q_CLOSE
%token S_OPEN
%token S_CLOSE
%token SAMP_OPEN
%token SAMP_CLOSE
%token SCRIPT_OPEN
%token SCRIPT_CLOSE
%token SELECT_OPEN
%token SELECT_CLOSE
%token SMALL_OPEN
%token SMALL_CLOSE
%token SPAN_OPEN
%token SPAN_CLOSE
%token STRIKE_OPEN
%token STRIKE_CLOSE
%token STRONG_OPEN
%token STRONG_CLOSE
%token STYLE_OPEN
%token STYLE_CLOSE
%token SUB_OPEN
%token SUB_CLOSE
%token SUP_OPEN
%token SUP_CLOSE
%token TABLE_OPEN
%token TABLE_CLOSE
%token TBODY_OPEN
%token TBODY_CLOSE
%token TD_OPEN
%token TD_CLOSE
%token TEXTAREA_OPEN
%token TEXTAREA_CLOSE
%token TFOOT_OPEN
%token TFOOT_CLOSE
%token TH_OPEN
%token TH_CLOSE
%token THEAD_OPEN
%token THEAD_CLOSE
%token TITLE_OPEN
%token TITLE_CLOSE
%token TR_OPEN
%token TR_CLOSE
%token TT_OPEN
%token TT_CLOSE
%token U_OPEN
%token U_CLOSE
%token UL_OPEN
%token UL_CLOSE
%token VAR_OPEN
%token VAR_CLOSE
%token XMP_OPEN
%token XMP_CLOSE
/* -- end block */

%token END

%error-verbose /* bison only option, not usable with yacc/byacc */

%start line


%%

line		: /* empty */				{ if ( DEBUG_LEVEL != 0) printf("reduce line empty\n"); }
			| line document END			{ if ( DEBUG_LEVEL != 0) printf("reduce line END\n"); return 0; }
			| line error token			{ yyerrok; errors++; }
			;


/* -- block generated by document_generator.sh */
document				: /* empty */														{ if ( DEBUG_LEVEL != 0) printf("reduce document empty\n"); }
			| document ANCHOR_OPEN document gap_anchor										{ if ( DEBUG_LEVEL != 0) printf("reduce document ANCHOR_OPEN\n"); }
			| document ABBR_OPEN document gap_abbr										{ if ( DEBUG_LEVEL != 0) printf("reduce document ABBR_OPEN\n"); }
			| document ACRONYM_OPEN document gap_acronym										{ if ( DEBUG_LEVEL != 0) printf("reduce document ACRONYM_OPEN\n"); }
			| document ADDRESS_OPEN document gap_address										{ if ( DEBUG_LEVEL != 0) printf("reduce document ADDRESS_OPEN\n"); }
			| document APPLET_OPEN document gap_applet										{ if ( DEBUG_LEVEL != 0) printf("reduce document APPLET_OPEN\n"); }
			| document AREA_OPEN document gap_area										{ if ( DEBUG_LEVEL != 0) printf("reduce document AREA_OPEN\n"); }
			| document B_OPEN document gap_b										{ if ( DEBUG_LEVEL != 0) printf("reduce document B_OPEN\n"); }
			| document BASE_OPEN document gap_base										{ if ( DEBUG_LEVEL != 0) printf("reduce document BASE_OPEN\n"); }
			| document BASEFONT_OPEN document gap_basefont										{ if ( DEBUG_LEVEL != 0) printf("reduce document BASEFONT_OPEN\n"); }
			| document BDO_OPEN document gap_bdo										{ if ( DEBUG_LEVEL != 0) printf("reduce document BDO_OPEN\n"); }
			| document BIG_OPEN document gap_big										{ if ( DEBUG_LEVEL != 0) printf("reduce document BIG_OPEN\n"); }
			| document BLOCKQUOTE_OPEN document gap_blockquote										{ if ( DEBUG_LEVEL != 0) printf("reduce document BLOCKQUOTE_OPEN\n"); }
			| document BODY_OPEN document gap_body										{ if ( DEBUG_LEVEL != 0) printf("reduce document BODY_OPEN\n"); }
			| document BR_OPEN document gap_br										{ if ( DEBUG_LEVEL != 0) printf("reduce document BR_OPEN\n"); }
			| document BUTTON_OPEN document gap_button										{ if ( DEBUG_LEVEL != 0) printf("reduce document BUTTON_OPEN\n"); }
			| document CAPTION_OPEN document gap_caption										{ if ( DEBUG_LEVEL != 0) printf("reduce document CAPTION_OPEN\n"); }
			| document CENTER_OPEN document gap_center										{ if ( DEBUG_LEVEL != 0) printf("reduce document CENTER_OPEN\n"); }
			| document CITE_OPEN document gap_cite										{ if ( DEBUG_LEVEL != 0) printf("reduce document CITE_OPEN\n"); }
			| document CODE_OPEN document gap_code										{ if ( DEBUG_LEVEL != 0) printf("reduce document CODE_OPEN\n"); }
			| document COL_OPEN document gap_col										{ if ( DEBUG_LEVEL != 0) printf("reduce document COL_OPEN\n"); }
			| document COLGROUP_OPEN document gap_colgroup										{ if ( DEBUG_LEVEL != 0) printf("reduce document COLGROUP_OPEN\n"); }
			| document DD_OPEN document gap_dd										{ if ( DEBUG_LEVEL != 0) printf("reduce document DD_OPEN\n"); }
			| document DEL_OPEN document gap_del										{ if ( DEBUG_LEVEL != 0) printf("reduce document DEL_OPEN\n"); }
			| document DFN_OPEN document gap_dfn										{ if ( DEBUG_LEVEL != 0) printf("reduce document DFN_OPEN\n"); }
			| document DIR_OPEN document gap_dir										{ if ( DEBUG_LEVEL != 0) printf("reduce document DIR_OPEN\n"); }
			| document DIV_OPEN document gap_div										{ if ( DEBUG_LEVEL != 0) printf("reduce document DIV_OPEN\n"); }
			| document DL_OPEN document gap_dl										{ if ( DEBUG_LEVEL != 0) printf("reduce document DL_OPEN\n"); }
			| document DT_OPEN document gap_dt										{ if ( DEBUG_LEVEL != 0) printf("reduce document DT_OPEN\n"); }
			| document EM_OPEN document gap_em										{ if ( DEBUG_LEVEL != 0) printf("reduce document EM_OPEN\n"); }
			| document FIELDSET_OPEN document gap_fieldset										{ if ( DEBUG_LEVEL != 0) printf("reduce document FIELDSET_OPEN\n"); }
			| document FONT_OPEN document gap_font										{ if ( DEBUG_LEVEL != 0) printf("reduce document FONT_OPEN\n"); }
			| document FORM_OPEN document gap_form										{ if ( DEBUG_LEVEL != 0) printf("reduce document FORM_OPEN\n"); }
			| document FRAME_OPEN document gap_frame										{ if ( DEBUG_LEVEL != 0) printf("reduce document FRAME_OPEN\n"); }
			| document FRAMESET_OPEN document gap_frameset										{ if ( DEBUG_LEVEL != 0) printf("reduce document FRAMESET_OPEN\n"); }
			| document H1_OPEN document gap_h1										{ if ( DEBUG_LEVEL != 0) printf("reduce document H1_OPEN\n"); }
			| document H2_OPEN document gap_h2										{ if ( DEBUG_LEVEL != 0) printf("reduce document H2_OPEN\n"); }
			| document H3_OPEN document gap_h3										{ if ( DEBUG_LEVEL != 0) printf("reduce document H3_OPEN\n"); }
			| document H4_OPEN document gap_h4										{ if ( DEBUG_LEVEL != 0) printf("reduce document H4_OPEN\n"); }
			| document H5_OPEN document gap_h5										{ if ( DEBUG_LEVEL != 0) printf("reduce document H5_OPEN\n"); }
			| document H6_OPEN document gap_h6										{ if ( DEBUG_LEVEL != 0) printf("reduce document H6_OPEN\n"); }
			| document HEAD_OPEN document gap_head										{ if ( DEBUG_LEVEL != 0) printf("reduce document HEAD_OPEN\n"); }
			| document HR_OPEN document gap_hr										{ if ( DEBUG_LEVEL != 0) printf("reduce document HR_OPEN\n"); }
			| document HTML_OPEN document gap_html										{ if ( DEBUG_LEVEL != 0) printf("reduce document HTML_OPEN\n"); }
			| document I_OPEN document gap_i										{ if ( DEBUG_LEVEL != 0) printf("reduce document I_OPEN\n"); }
			| document IFRAME_OPEN document gap_iframe										{ if ( DEBUG_LEVEL != 0) printf("reduce document IFRAME_OPEN\n"); }
			| document IMG_OPEN document gap_img										{ if ( DEBUG_LEVEL != 0) printf("reduce document IMG_OPEN\n"); }
			| document INPUT_OPEN document gap_input										{ if ( DEBUG_LEVEL != 0) printf("reduce document INPUT_OPEN\n"); }
			| document INS_OPEN document gap_ins										{ if ( DEBUG_LEVEL != 0) printf("reduce document INS_OPEN\n"); }
			| document ISINDEX_OPEN document gap_isindex										{ if ( DEBUG_LEVEL != 0) printf("reduce document ISINDEX_OPEN\n"); }
			| document KBD_OPEN document gap_kbd										{ if ( DEBUG_LEVEL != 0) printf("reduce document KBD_OPEN\n"); }
			| document LABEL_OPEN document gap_label										{ if ( DEBUG_LEVEL != 0) printf("reduce document LABEL_OPEN\n"); }
			| document LEGEND_OPEN document gap_legend										{ if ( DEBUG_LEVEL != 0) printf("reduce document LEGEND_OPEN\n"); }
			| document LI_OPEN document gap_li										{ if ( DEBUG_LEVEL != 0) printf("reduce document LI_OPEN\n"); }
			| document LINK_OPEN document gap_link										{ if ( DEBUG_LEVEL != 0) printf("reduce document LINK_OPEN\n"); }
			| document MAP_OPEN document gap_map										{ if ( DEBUG_LEVEL != 0) printf("reduce document MAP_OPEN\n"); }
			| document MENU_OPEN document gap_menu										{ if ( DEBUG_LEVEL != 0) printf("reduce document MENU_OPEN\n"); }
			| document META_OPEN document gap_meta										{ if ( DEBUG_LEVEL != 0) printf("reduce document META_OPEN\n"); }
			| document NOFRAMES_OPEN document gap_noframes										{ if ( DEBUG_LEVEL != 0) printf("reduce document NOFRAMES_OPEN\n"); }
			| document NOSCRIPT_OPEN document gap_noscript										{ if ( DEBUG_LEVEL != 0) printf("reduce document NOSCRIPT_OPEN\n"); }
			| document OBJECT_OPEN document gap_object										{ if ( DEBUG_LEVEL != 0) printf("reduce document OBJECT_OPEN\n"); }
			| document OL_OPEN document gap_ol										{ if ( DEBUG_LEVEL != 0) printf("reduce document OL_OPEN\n"); }
			| document OPTGROUP_OPEN document gap_optgroup										{ if ( DEBUG_LEVEL != 0) printf("reduce document OPTGROUP_OPEN\n"); }
			| document OPTION_OPEN document gap_option										{ if ( DEBUG_LEVEL != 0) printf("reduce document OPTION_OPEN\n"); }
			| document P_OPEN document gap_p										{ if ( DEBUG_LEVEL != 0) printf("reduce document P_OPEN\n"); }
			| document PARAM_OPEN document gap_param										{ if ( DEBUG_LEVEL != 0) printf("reduce document PARAM_OPEN\n"); }
			| document PRE_OPEN document gap_pre										{ if ( DEBUG_LEVEL != 0) printf("reduce document PRE_OPEN\n"); }
			| document Q_OPEN document gap_q										{ if ( DEBUG_LEVEL != 0) printf("reduce document Q_OPEN\n"); }
			| document S_OPEN document gap_s										{ if ( DEBUG_LEVEL != 0) printf("reduce document S_OPEN\n"); }
			| document SAMP_OPEN document gap_samp										{ if ( DEBUG_LEVEL != 0) printf("reduce document SAMP_OPEN\n"); }
			| document SCRIPT_OPEN document gap_script										{ if ( DEBUG_LEVEL != 0) printf("reduce document SCRIPT_OPEN\n"); }
			| document SELECT_OPEN document gap_select										{ if ( DEBUG_LEVEL != 0) printf("reduce document SELECT_OPEN\n"); }
			| document SMALL_OPEN document gap_small										{ if ( DEBUG_LEVEL != 0) printf("reduce document SMALL_OPEN\n"); }
			| document SPAN_OPEN document gap_span										{ if ( DEBUG_LEVEL != 0) printf("reduce document SPAN_OPEN\n"); }
			| document STRIKE_OPEN document gap_strike										{ if ( DEBUG_LEVEL != 0) printf("reduce document STRIKE_OPEN\n"); }
			| document STRONG_OPEN document gap_strong										{ if ( DEBUG_LEVEL != 0) printf("reduce document STRONG_OPEN\n"); }
			| document STYLE_OPEN document gap_style										{ if ( DEBUG_LEVEL != 0) printf("reduce document STYLE_OPEN\n"); }
			| document SUB_OPEN document gap_sub										{ if ( DEBUG_LEVEL != 0) printf("reduce document SUB_OPEN\n"); }
			| document SUP_OPEN document gap_sup										{ if ( DEBUG_LEVEL != 0) printf("reduce document SUP_OPEN\n"); }
			| document TABLE_OPEN document gap_table										{ if ( DEBUG_LEVEL != 0) printf("reduce document TABLE_OPEN\n"); }
			| document TBODY_OPEN document gap_tbody										{ if ( DEBUG_LEVEL != 0) printf("reduce document TBODY_OPEN\n"); }
			| document TD_OPEN document gap_td										{ if ( DEBUG_LEVEL != 0) printf("reduce document TD_OPEN\n"); }
			| document TEXTAREA_OPEN document gap_textarea										{ if ( DEBUG_LEVEL != 0) printf("reduce document TEXTAREA_OPEN\n"); }
			| document TFOOT_OPEN document gap_tfoot										{ if ( DEBUG_LEVEL != 0) printf("reduce document TFOOT_OPEN\n"); }
			| document TH_OPEN document gap_th										{ if ( DEBUG_LEVEL != 0) printf("reduce document TH_OPEN\n"); }
			| document THEAD_OPEN document gap_thead										{ if ( DEBUG_LEVEL != 0) printf("reduce document THEAD_OPEN\n"); }
			| document TITLE_OPEN document gap_title										{ if ( DEBUG_LEVEL != 0) printf("reduce document TITLE_OPEN\n"); }
			| document TR_OPEN document gap_tr										{ if ( DEBUG_LEVEL != 0) printf("reduce document TR_OPEN\n"); }
			| document TT_OPEN document gap_tt										{ if ( DEBUG_LEVEL != 0) printf("reduce document TT_OPEN\n"); }
			| document U_OPEN document gap_u										{ if ( DEBUG_LEVEL != 0) printf("reduce document U_OPEN\n"); }
			| document UL_OPEN document gap_ul										{ if ( DEBUG_LEVEL != 0) printf("reduce document UL_OPEN\n"); }
			| document VAR_OPEN document gap_var										{ if ( DEBUG_LEVEL != 0) printf("reduce document VAR_OPEN\n"); }
			| document XMP_OPEN document gap_xmp										{ if ( DEBUG_LEVEL != 0) printf("reduce document XMP_OPEN\n"); }
			;
/* -- end of block */
/* -- block generated by token_generator.sh */
token		: ANCHOR_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token ANCHOR_OPEN\n"); }
			| ANCHOR_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token ANCHOR_CLOSE\n"); }
			| ABBR_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token ABBR_OPEN\n"); }
			| ABBR_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token ABBR_CLOSE\n"); }
			| ACRONYM_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token ACRONYM_OPEN\n"); }
			| ACRONYM_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token ACRONYM_CLOSE\n"); }
			| ADDRESS_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token ADDRESS_OPEN\n"); }
			| ADDRESS_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token ADDRESS_CLOSE\n"); }
			| APPLET_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token APPLET_OPEN\n"); }
			| APPLET_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token APPLET_CLOSE\n"); }
			| AREA_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token AREA_OPEN\n"); }
			| AREA_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token AREA_CLOSE\n"); }
			| B_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token B_OPEN\n"); }
			| B_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token B_CLOSE\n"); }
			| BASE_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token BASE_OPEN\n"); }
			| BASE_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token BASE_CLOSE\n"); }
			| BASEFONT_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token BASEFONT_OPEN\n"); }
			| BASEFONT_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token BASEFONT_CLOSE\n"); }
			| BDO_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token BDO_OPEN\n"); }
			| BDO_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token BDO_CLOSE\n"); }
			| BIG_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token BIG_OPEN\n"); }
			| BIG_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token BIG_CLOSE\n"); }
			| BLOCKQUOTE_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token BLOCKQUOTE_OPEN\n"); }
			| BLOCKQUOTE_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token BLOCKQUOTE_CLOSE\n"); }
			| BODY_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token BODY_OPEN\n"); }
			| BODY_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token BODY_CLOSE\n"); }
			| BR_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token BR_OPEN\n"); }
			| BR_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token BR_CLOSE\n"); }
			| BUTTON_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token BUTTON_OPEN\n"); }
			| BUTTON_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token BUTTON_CLOSE\n"); }
			| CAPTION_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token CAPTION_OPEN\n"); }
			| CAPTION_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token CAPTION_CLOSE\n"); }
			| CENTER_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token CENTER_OPEN\n"); }
			| CENTER_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token CENTER_CLOSE\n"); }
			| CITE_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token CITE_OPEN\n"); }
			| CITE_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token CITE_CLOSE\n"); }
			| CODE_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token CODE_OPEN\n"); }
			| CODE_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token CODE_CLOSE\n"); }
			| COL_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token COL_OPEN\n"); }
			| COL_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token COL_CLOSE\n"); }
			| COLGROUP_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token COLGROUP_OPEN\n"); }
			| COLGROUP_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token COLGROUP_CLOSE\n"); }
			| DD_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token DD_OPEN\n"); }
			| DD_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token DD_CLOSE\n"); }
			| DEL_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token DEL_OPEN\n"); }
			| DEL_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token DEL_CLOSE\n"); }
			| DFN_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token DFN_OPEN\n"); }
			| DFN_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token DFN_CLOSE\n"); }
			| DIR_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token DIR_OPEN\n"); }
			| DIR_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token DIR_CLOSE\n"); }
			| DIV_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token DIV_OPEN\n"); }
			| DIV_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token DIV_CLOSE\n"); }
			| DL_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token DL_OPEN\n"); }
			| DL_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token DL_CLOSE\n"); }
			| DT_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token DT_OPEN\n"); }
			| DT_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token DT_CLOSE\n"); }
			| EM_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token EM_OPEN\n"); }
			| EM_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token EM_CLOSE\n"); }
			| FIELDSET_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token FIELDSET_OPEN\n"); }
			| FIELDSET_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token FIELDSET_CLOSE\n"); }
			| FONT_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token FONT_OPEN\n"); }
			| FONT_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token FONT_CLOSE\n"); }
			| FORM_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token FORM_OPEN\n"); }
			| FORM_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token FORM_CLOSE\n"); }
			| FRAME_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token FRAME_OPEN\n"); }
			| FRAME_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token FRAME_CLOSE\n"); }
			| FRAMESET_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token FRAMESET_OPEN\n"); }
			| FRAMESET_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token FRAMESET_CLOSE\n"); }
			| H1_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token H1_OPEN\n"); }
			| H1_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token H1_CLOSE\n"); }
			| H2_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token H2_OPEN\n"); }
			| H2_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token H2_CLOSE\n"); }
			| H3_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token H3_OPEN\n"); }
			| H3_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token H3_CLOSE\n"); }
			| H4_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token H4_OPEN\n"); }
			| H4_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token H4_CLOSE\n"); }
			| H5_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token H5_OPEN\n"); }
			| H5_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token H5_CLOSE\n"); }
			| H6_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token H6_OPEN\n"); }
			| H6_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token H6_CLOSE\n"); }
			| HEAD_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token HEAD_OPEN\n"); }
			| HEAD_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token HEAD_CLOSE\n"); }
			| HR_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token HR_OPEN\n"); }
			| HR_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token HR_CLOSE\n"); }
			| HTML_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token HTML_OPEN\n"); }
			| HTML_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token HTML_CLOSE\n"); }
			| I_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token I_OPEN\n"); }
			| I_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token I_CLOSE\n"); }
			| IFRAME_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token IFRAME_OPEN\n"); }
			| IFRAME_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token IFRAME_CLOSE\n"); }
			| IMG_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token IMG_OPEN\n"); }
			| IMG_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token IMG_CLOSE\n"); }
			| INPUT_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token INPUT_OPEN\n"); }
			| INPUT_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token INPUT_CLOSE\n"); }
			| INS_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token INS_OPEN\n"); }
			| INS_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token INS_CLOSE\n"); }
			| ISINDEX_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token ISINDEX_OPEN\n"); }
			| ISINDEX_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token ISINDEX_CLOSE\n"); }
			| KBD_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token KBD_OPEN\n"); }
			| KBD_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token KBD_CLOSE\n"); }
			| LABEL_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token LABEL_OPEN\n"); }
			| LABEL_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token LABEL_CLOSE\n"); }
			| LEGEND_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token LEGEND_OPEN\n"); }
			| LEGEND_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token LEGEND_CLOSE\n"); }
			| LI_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token LI_OPEN\n"); }
			| LI_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token LI_CLOSE\n"); }
			| LINK_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token LINK_OPEN\n"); }
			| LINK_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token LINK_CLOSE\n"); }
			| MAP_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token MAP_OPEN\n"); }
			| MAP_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token MAP_CLOSE\n"); }
			| MENU_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token MENU_OPEN\n"); }
			| MENU_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token MENU_CLOSE\n"); }
			| META_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token META_OPEN\n"); }
			| META_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token META_CLOSE\n"); }
			| NOFRAMES_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token NOFRAMES_OPEN\n"); }
			| NOFRAMES_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token NOFRAMES_CLOSE\n"); }
			| NOSCRIPT_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token NOSCRIPT_OPEN\n"); }
			| NOSCRIPT_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token NOSCRIPT_CLOSE\n"); }
			| OBJECT_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token OBJECT_OPEN\n"); }
			| OBJECT_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token OBJECT_CLOSE\n"); }
			| OL_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token OL_OPEN\n"); }
			| OL_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token OL_CLOSE\n"); }
			| OPTGROUP_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token OPTGROUP_OPEN\n"); }
			| OPTGROUP_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token OPTGROUP_CLOSE\n"); }
			| OPTION_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token OPTION_OPEN\n"); }
			| OPTION_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token OPTION_CLOSE\n"); }
			| P_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token P_OPEN\n"); }
			| P_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token P_CLOSE\n"); }
			| PARAM_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token PARAM_OPEN\n"); }
			| PARAM_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token PARAM_CLOSE\n"); }
			| PRE_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token PRE_OPEN\n"); }
			| PRE_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token PRE_CLOSE\n"); }
			| Q_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token Q_OPEN\n"); }
			| Q_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token Q_CLOSE\n"); }
			| S_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token S_OPEN\n"); }
			| S_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token S_CLOSE\n"); }
			| SAMP_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token SAMP_OPEN\n"); }
			| SAMP_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token SAMP_CLOSE\n"); }
			| SCRIPT_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token SCRIPT_OPEN\n"); }
			| SCRIPT_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token SCRIPT_CLOSE\n"); }
			| SELECT_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token SELECT_OPEN\n"); }
			| SELECT_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token SELECT_CLOSE\n"); }
			| SMALL_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token SMALL_OPEN\n"); }
			| SMALL_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token SMALL_CLOSE\n"); }
			| SPAN_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token SPAN_OPEN\n"); }
			| SPAN_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token SPAN_CLOSE\n"); }
			| STRIKE_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token STRIKE_OPEN\n"); }
			| STRIKE_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token STRIKE_CLOSE\n"); }
			| STRONG_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token STRONG_OPEN\n"); }
			| STRONG_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token STRONG_CLOSE\n"); }
			| STYLE_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token STYLE_OPEN\n"); }
			| STYLE_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token STYLE_CLOSE\n"); }
			| SUB_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token SUB_OPEN\n"); }
			| SUB_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token SUB_CLOSE\n"); }
			| SUP_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token SUP_OPEN\n"); }
			| SUP_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token SUP_CLOSE\n"); }
			| TABLE_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token TABLE_OPEN\n"); }
			| TABLE_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token TABLE_CLOSE\n"); }
			| TBODY_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token TBODY_OPEN\n"); }
			| TBODY_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token TBODY_CLOSE\n"); }
			| TD_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token TD_OPEN\n"); }
			| TD_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token TD_CLOSE\n"); }
			| TEXTAREA_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token TEXTAREA_OPEN\n"); }
			| TEXTAREA_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token TEXTAREA_CLOSE\n"); }
			| TFOOT_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token TFOOT_OPEN\n"); }
			| TFOOT_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token TFOOT_CLOSE\n"); }
			| TH_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token TH_OPEN\n"); }
			| TH_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token TH_CLOSE\n"); }
			| THEAD_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token THEAD_OPEN\n"); }
			| THEAD_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token THEAD_CLOSE\n"); }
			| TITLE_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token TITLE_OPEN\n"); }
			| TITLE_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token TITLE_CLOSE\n"); }
			| TR_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token TR_OPEN\n"); }
			| TR_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token TR_CLOSE\n"); }
			| TT_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token TT_OPEN\n"); }
			| TT_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token TT_CLOSE\n"); }
			| U_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token U_OPEN\n"); }
			| U_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token U_CLOSE\n"); }
			| UL_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token UL_OPEN\n"); }
			| UL_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token UL_CLOSE\n"); }
			| VAR_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token VAR_OPEN\n"); }
			| VAR_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token VAR_CLOSE\n"); }
			| XMP_OPEN								{ if ( DEBUG_LEVEL != 0) printf("reduce token XMP_OPEN\n"); }
			| XMP_CLOSE								{ if ( DEBUG_LEVEL != 0) printf("reduce token XMP_CLOSE\n"); }
			| END								{ if ( DEBUG_LEVEL != 0) printf("reduce token XMP_CLOSE\n"); }
			;
/* -- end of block */
/* -- block generated by gaps_generator.sh */
gap_anchor		: ANCHOR_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps ANCHOR_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps ANCHOR_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_abbr		: ABBR_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps ABBR_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps ABBR_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_acronym		: ACRONYM_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps ACRONYM_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps ACRONYM_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_address		: ADDRESS_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps ADDRESS_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps ADDRESS_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_applet		: APPLET_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps APPLET_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps APPLET_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_area		: AREA_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps AREA_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps AREA_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_b		: B_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps B_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps B_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_base		: BASE_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps BASE_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps BASE_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_basefont		: BASEFONT_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps BASEFONT_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps BASEFONT_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_bdo		: BDO_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps BDO_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps BDO_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_big		: BIG_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps BIG_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps BIG_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_blockquote		: BLOCKQUOTE_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps BLOCKQUOTE_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps BLOCKQUOTE_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_body		: BODY_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps BODY_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps BODY_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_br		: BR_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps BR_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps BR_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_button		: BUTTON_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps BUTTON_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps BUTTON_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_caption		: CAPTION_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps CAPTION_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps CAPTION_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_center		: CENTER_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps CENTER_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps CENTER_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_cite		: CITE_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps CITE_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps CITE_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_code		: CODE_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps CODE_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps CODE_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_col		: COL_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps COL_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps COL_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_colgroup		: COLGROUP_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps COLGROUP_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps COLGROUP_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_dd		: DD_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps DD_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps DD_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_del		: DEL_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps DEL_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps DEL_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_dfn		: DFN_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps DFN_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps DFN_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_dir		: DIR_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps DIR_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps DIR_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_div		: DIV_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps DIV_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps DIV_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_dl		: DL_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps DL_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps DL_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_dt		: DT_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps DT_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps DT_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_em		: EM_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps EM_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps EM_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_fieldset		: FIELDSET_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps FIELDSET_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps FIELDSET_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_font		: FONT_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps FONT_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps FONT_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_form		: FORM_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps FORM_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps FORM_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_frame		: FRAME_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps FRAME_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps FRAME_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_frameset		: FRAMESET_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps FRAMESET_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps FRAMESET_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_h1		: H1_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps H1_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps H1_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_h2		: H2_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps H2_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps H2_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_h3		: H3_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps H3_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps H3_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_h4		: H4_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps H4_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps H4_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_h5		: H5_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps H5_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps H5_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_h6		: H6_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps H6_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps H6_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_head		: HEAD_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps HEAD_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps HEAD_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_hr		: HR_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps HR_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps HR_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_html		: HTML_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps HTML_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps HTML_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_i		: I_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps I_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps I_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_iframe		: IFRAME_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps IFRAME_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps IFRAME_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_img		: IMG_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps IMG_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps IMG_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_input		: INPUT_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps INPUT_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps INPUT_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_ins		: INS_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps INS_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps INS_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_isindex		: ISINDEX_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps ISINDEX_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps ISINDEX_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_kbd		: KBD_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps KBD_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps KBD_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_label		: LABEL_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps LABEL_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps LABEL_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_legend		: LEGEND_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps LEGEND_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps LEGEND_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_li		: LI_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps LI_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps LI_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_link		: LINK_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps LINK_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps LINK_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_map		: MAP_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps MAP_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps MAP_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_menu		: MENU_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps MENU_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps MENU_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_meta		: META_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps META_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps META_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_noframes		: NOFRAMES_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps NOFRAMES_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps NOFRAMES_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_noscript		: NOSCRIPT_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps NOSCRIPT_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps NOSCRIPT_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_object		: OBJECT_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps OBJECT_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps OBJECT_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_ol		: OL_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps OL_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps OL_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_optgroup		: OPTGROUP_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps OPTGROUP_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps OPTGROUP_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_option		: OPTION_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps OPTION_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps OPTION_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_p		: P_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps P_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps P_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_param		: PARAM_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps PARAM_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps PARAM_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_pre		: PRE_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps PRE_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps PRE_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_q		: Q_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps Q_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps Q_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_s		: S_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps S_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps S_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_samp		: SAMP_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps SAMP_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps SAMP_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_script		: SCRIPT_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps SCRIPT_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps SCRIPT_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_select		: SELECT_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps SELECT_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps SELECT_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_small		: SMALL_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps SMALL_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps SMALL_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_span		: SPAN_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps SPAN_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps SPAN_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_strike		: STRIKE_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps STRIKE_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps STRIKE_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_strong		: STRONG_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps STRONG_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps STRONG_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_style		: STYLE_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps STYLE_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps STYLE_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_sub		: SUB_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps SUB_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps SUB_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_sup		: SUP_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps SUP_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps SUP_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_table		: TABLE_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps TABLE_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps TABLE_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_tbody		: TBODY_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps TBODY_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps TBODY_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_td		: TD_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps TD_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps TD_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_textarea		: TEXTAREA_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps TEXTAREA_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps TEXTAREA_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_tfoot		: TFOOT_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps TFOOT_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps TFOOT_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_th		: TH_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps TH_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps TH_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_thead		: THEAD_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps THEAD_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps THEAD_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_title		: TITLE_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps TITLE_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps TITLE_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_tr		: TR_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps TR_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps TR_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_tt		: TT_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps TT_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps TT_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_u		: U_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps U_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps U_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_ul		: UL_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps UL_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps UL_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_var		: VAR_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps VAR_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps VAR_CLOSE ERROR\n"); errors++; yyerrok; }
			;

gap_xmp		: XMP_CLOSE											{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps XMP_CLOSE\n"); }
			| error												{ if ( DEBUG_LEVEL != 0 ) printf("reduce gaps XMP_CLOSE ERROR\n"); errors++; yyerrok; }
			;

/* -- end of block */
